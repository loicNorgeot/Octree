#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 12 17:25:24 2017

@author: iscdadm
"""


import bpy
import numpy as np 
scn = bpy.context.scene
scn.frame_start = 1
scn.frame_end = 1000
fichier=open("trajectoireselse.txt","r")

b=fichier.readlines()
i=-1
for t in b:
    c=t.split()
    i=i+1
    a=bpy.ops.mesh.primitive_uv_sphere_add(size=0.025, view_align=False, enter_editmode=False, location=(float(c[0]),float(c[1]),float(c[2])), layers=(True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
    bpy.context.active_object.name = 'a'+str(i)
    a=bpy.ops.object.shade_smooth() 
    material = bpy.data.materials.new(name="Bulles")
    material.use_nodes = True

        # Remove default
    material.node_tree.nodes.remove(material.node_tree.nodes.get('Diffuse BSDF'))
    material_output = material.node_tree.nodes.get('Material Output')
    emission = material.node_tree.nodes.new('ShaderNodeBsdfGlass') 
    emission.inputs['Color'].default_value = (1,1,1,1) 

    # link emission shader to material
    material.node_tree.links.new(material_output.inputs[0], emission.outputs[0])

    # set activer material to your new material
    a = bpy.context.active_object
    a.active_material = material
#i=0
#l=10

#x=bpy.ops.mesh.primitive_uv_sphere_add(size=0.025, view_align=False, enter_editmode=False, location=(float(c[3]),float(c[4]),float(c[5])), layers=(True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
#bpy.context.active_object.name = 'x'
#bpy.context.scene.frame_set(1)

#bpy.data.objects['a1'].location = (1,1,1)
#bpy.data.objects['x'].location = (2,2,2)

##a=bpy.context.active_object
##bpy.data.objects['a'].select = True
##a.location=(1,1,1) 

i=-1

for t in b:
    l=1
    bpy.context.scene.frame_set(l)
    c=t.split()
    i=i+1
    a=0
    
    for j in range (0,int(len(c)/3)):  
#    a=bpy.context.active_object
        
        y=(float(c[a]),float(c[a+1]),float(c[a+2]))
        a=a+3
#        if y!=(0,0,0):
        bpy.data.objects['a'+str(i)].location = y
        bpy.data.objects['a'+str(i)].keyframe_insert('location', frame=l)
        bpy.data.objects['a'+str(i)].hide = False
        bpy.data.objects['a'+str(i)].hide_render=False  
        bpy.data.objects['a'+str(i)].keyframe_insert(data_path="hide", index=-1,frame=l)
        bpy.data.objects['a'+str(i)].keyframe_insert(data_path="hide_render", index=-1,frame=l)
        if j==int(len(c)/3)-1:
            current_frame=l
            """bpy.data.objects['a'+str(i)].hide = True"""
            bpy.data.objects['a'+str(i)].hide_render=True 
            bpy.data.objects['a'+str(i)].keyframe_insert(data_path="hide_render", index=-1,frame=current_frame)
#        else : 
#            bpy.data.objects['a'+str(j)].keyframe_insert('location', frame=l)
    
#    if l==1000:
#        for j in range(0,10):
#            bpy.data.objects['a'+str(j)].location=(0,0,0)
#            bpy.data.objects['a'+str(j)].keyframe_insert('location', frame=1000) 
#        break 
    
            
        l=l+1
#for j in range (0,10):
#    
#    bpy.context.scene.frame_set(1)
#    curveData = bpy.data.curves.new('myCurve'+str(j), type='CURVE')
#    curveData.dimensions = '3D'
#    curveData.resolution_u = 2
#    polyline = curveData.splines.new('NURBS')
#    polyline.points.add(len(b))
#    i=0
#    for t in b:
#        c=b[i].split()
#        i=i+1
#        x,y,z=np.array([float(c[0+k]),float(c[1+k]),float(c[2+k])])
#        if (x,y,z)==(0,0,0):
#            break 
#        else :
#            polyline.points[i].co = (x, y, z, 1)
#    curveOB = bpy.data.objects.new('myCurve'+str(j), curveData)
#    scn.objects.link(curveOB)
#    scn.objects.active = curveOB
#    curveOB.select = True
#    k=k+3